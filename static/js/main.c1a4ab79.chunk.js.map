{"version":3,"sources":["features/notesSlice.js","features/noteheader/AddNoteButton.js","features/noteheader/NotesCount.js","features/noteheader/NoteHeader.js","features/notebody/DeleteNote.js","features/notebody/NotesList.js","features/notebody/AddNewNote.js","features/notebody/NoteBody.js","App.js","store.js","index.js"],"names":["notesAdapter","createEntityAdapter","sortComparer","a","b","timeStamp","localeCompare","initialState","getInitialState","showForm","notesSlice","createSlice","name","reducers","addNewNote","reducer","state","action","addOne","payload","prepare","title","content","id","nanoid","completed","Date","toLocaleDateString","toLocaleTimeString","removeNote","removeOne","changeNoteStatus","clickedNote","entities","showNewNoteForm","actions","getSelectors","notes","selectAllNotes","selectAll","AddNoteButton","selectById","dispatch","useDispatch","useSelector","className","onClick","NotesCount","allNotes","length","NoteHeader","DeleteNote","NotesList","renderedNotes","handleStatusChange","event","target","value","map","note","key","onChange","AddNewNote","useState","setTitle","setContent","onSubmit","preventDefault","htmlFor","type","NoteBody","App","notesReducer","store","configureStore","destination","document","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.c1a4ab79.chunk.js","sourcesContent":["import {createSlice, nanoid, createEntityAdapter} from \"@reduxjs/toolkit\";\r\n\r\nconst notesAdapter = createEntityAdapter({\r\n    sortComparer: (a, b) => b.timeStamp.localeCompare(a.timeStamp)\r\n});\r\n\r\nconst initialState = notesAdapter.getInitialState({\r\n    showForm: false,\r\n});\r\n\r\nconst notesSlice = createSlice({\r\n    name: \"notes\",\r\n    initialState,\r\n    reducers: {\r\n        addNewNote: {\r\n            reducer(state, action) {\r\n                notesAdapter.addOne(state, action.payload)\r\n            },\r\n            prepare(title, content) {\r\n                return {\r\n                    payload: {\r\n                        id: nanoid(),\r\n                        title,\r\n                        content,\r\n                        completed: false,\r\n                        timeStamp: `${new Date().toLocaleDateString()} ~ ${new Date().toLocaleTimeString()}`\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        removeNote: {\r\n            reducer(state, action) {\r\n                notesAdapter.removeOne(state, action.payload)\r\n            },\r\n            prepare(id) {\r\n                return {\r\n                    payload: id\r\n                }\r\n            }\r\n        },\r\n        changeNoteStatus: {\r\n            reducer(state, action) {\r\n                const id = action.payload;\r\n                const clickedNote = state.entities[id];\r\n\r\n                if (clickedNote) clickedNote.completed = !clickedNote.completed;\r\n            },\r\n            prepare(id) {\r\n                return {\r\n                    payload: id\r\n                }\r\n            }\r\n        }, \r\n        showNewNoteForm: {\r\n            reducer(state) {\r\n                state.showForm = !state.showForm;\r\n            },\r\n        }\r\n    }\r\n});\r\n\r\nexport default notesSlice.reducer;\r\n\r\nexport const {addNewNote, changeNoteStatus, showNewNoteForm, removeNote} = notesSlice.actions;\r\n\r\nexport const {\r\n    selectAll: selectAllNotes,\r\n    selectById: selectNoteById,\r\n} = notesAdapter.getSelectors(state => state.notes);","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport \"./AddNoteButton.css\";\r\nimport {showNewNoteForm} from \"../notesSlice\";\r\n\r\nexport const AddNoteButton = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const showForm = useSelector(state => state.notes.showForm);\r\n    \r\n    const toggleNewNoteForm = () => dispatch(showNewNoteForm());\r\n\r\n    return(\r\n        <button className=\"addNoteButton\" onClick={toggleNewNoteForm}>{showForm === true ? \"-\": \"+\"}</button>\r\n    );\r\n};","import React, {Fragment} from \"react\";\r\nimport { selectAllNotes } from \"../notesSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./NotesCount.css\";\r\n\r\nexport const NotesCount = () => {\r\n    const allNotes = useSelector(selectAllNotes);\r\n\r\n    return(\r\n        <Fragment>\r\n            <h1 className=\"countHeader\">All notes</h1>\r\n            <p>{`${allNotes.length} ${allNotes.length === 1 ? \"Note\": \"Notes\"}`}</p>\r\n        </Fragment>\r\n    );\r\n};","import React from \"react\";\r\nimport {AddNoteButton} from \"./AddNoteButton\";\r\nimport {NotesCount} from \"./NotesCount\";\r\nimport \"./NoteHeader.css\";\r\n\r\nexport const NoteHeader = () => {\r\n    return(\r\n        <section className=\"noteHeader\">\r\n            <NotesCount/>\r\n            <AddNoteButton/>\r\n        </section>\r\n    );\r\n};","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { removeNote} from \"../notesSlice\";\r\nimport \"./DeleteNote.css\";\r\n\r\nexport const DeleteNote = ({id}) => {\r\n    const dispatch = useDispatch();\r\n    \r\n    const deleteNote = () => dispatch(removeNote(id))\r\n\r\n    return <button className=\"removeNote\" onClick={deleteNote}>-</button>;\r\n};","import React, { Fragment } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectAllNotes, changeNoteStatus } from \"../notesSlice\";\r\nimport \"./NoteList.css\";\r\nimport { DeleteNote } from \"./DeleteNote\";\r\n\r\nexport const NotesList = () => {\r\n    const allNotes = useSelector(selectAllNotes);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleStatusChange = event => dispatch(changeNoteStatus(event.target.value));\r\n\r\n    let renderedNotes;\r\n\r\n    if (allNotes.length < 1) {\r\n        renderedNotes = <article><h2 className=\"noNotes\">No Notes to Display</h2></article>\r\n    } else {\r\n        renderedNotes = allNotes.map(note => {\r\n            var { id, title, content, timeStamp, completed } = note;\r\n\r\n            return (\r\n                <article className={completed === false ? \"note\" : \"note noteCompleted\"} key={id}>\r\n                    <section className=\"noteHead\">\r\n                        <h2>{title}</h2>\r\n                        <select onChange={handleStatusChange} className=\"noteStatus\">\r\n                            <option value={id}>Pending</option>\r\n                            <option value={id}>Completed</option>\r\n                        </select>\r\n                        <DeleteNote id={id}/>\r\n                    </section>\r\n                    <p>{content}</p>\r\n                    <p><i>{timeStamp}</i></p>\r\n                </article>\r\n            );\r\n        });\r\n    }\r\n\r\n    return <Fragment>{renderedNotes}</Fragment>;\r\n};","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addNewNote, showNewNoteForm } from \"../notesSlice\";\r\n\r\nexport const AddNewNote = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    const handleAddTitle = event => setTitle(event.target.value);\r\n    const handleAddContent = event => setContent(event.target.value);\r\n    const handleSaveNote = event => {\r\n        event.preventDefault();\r\n\r\n        if (title && content) {\r\n            dispatch(addNewNote(title, content));\r\n            dispatch(showNewNoteForm())\r\n\r\n            setTitle(\"\");\r\n            setContent(\"\");\r\n        }\r\n    };\r\n\r\n    const showForm = useSelector(state => state.notes.showForm);\r\n\r\n    return (\r\n        <section className={showForm === true ? \"formContainer shown\": \"formContainer hidden\"}>\r\n            <form onSubmit={handleSaveNote}>\r\n            <label htmlFor=\"noteTitle\">Note Title:</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"noteTitle\"\r\n                value={title}\r\n                onChange={handleAddTitle}\r\n            />\r\n\r\n            <label htmlFor=\"noteContent\">Note Content:</label>\r\n            <textarea\r\n                id=\"noteContent\"\r\n                value={content}\r\n                onChange={handleAddContent}\r\n            />\r\n\r\n            <button type=\"submit\">Save Note</button>\r\n        </form>\r\n        </section>\r\n    );\r\n};","import React from \"react\";\r\nimport {NotesList} from \"./NotesList\";\r\nimport {AddNewNote} from \"./AddNewNote\";\r\nimport \"./NoteBody.css\";\r\n\r\nexport const NoteBody = () => {\r\n    return(\r\n        <section className=\"noteBody\">\r\n            <NotesList/>\r\n            <AddNewNote/>\r\n        </section>\r\n    )\r\n};","import React, {Fragment} from \"react\";\r\nimport {NoteHeader} from \"./features/noteheader/NoteHeader\";\r\nimport {NoteBody} from \"./features/notebody/NoteBody\";\r\n\r\nexport const App = () => {\r\n    return(\r\n        <Fragment>\r\n            <NoteHeader/>\r\n            <NoteBody/>\r\n        </Fragment>\r\n    );\r\n};","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport notesReducer from \"./features/notesSlice\";\r\n\r\nconst reducer = {\r\n    notes: notesReducer,\r\n};\r\n\r\nexport const store = configureStore({\r\n    reducer,\r\n});","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {App} from \"./App\";\r\nimport {store} from \"./store\";\r\nimport \"./index.css\"\r\n\r\nconst destination = document.querySelector(\"#root\");\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    destination\r\n);"],"sourceRoot":""}